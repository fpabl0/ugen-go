// Package ugen provide simple utilities to create simple and private
// generators.
package ugen

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"runtime"
	"text/template"

	"golang.org/x/tools/imports"
)

// File represents the generated file.
type File struct {
	buf      bytes.Buffer
	filename string
}

// FromCallerPath returns a path that is upper than the CallerPath
// by skipUp. For example:
// If the caller path is:
// 			/Users/example/project
// Then calling FromCallerPath(1) will return:
// 			/Users/example
func FromCallerPath(skipUp int) string {
	_, fpath, _, _ := runtime.Caller(1)
	for i := 0; i < skipUp+1; i++ {
		fpath = filepath.Dir(fpath)
	}
	return fpath
}

// NewFile creates a new generated file with generator header and
// package name.
func NewFile(filename, generator, pkg string) *File {
	f := &File{filename: filename}
	fmt.Fprintf(&f.buf, `// auto-generated
// Code generated by '%s'. DO NOT EDIT.

package %s
`, generator, pkg)
	return f
}

// WriteImports write imports header to the generated file.
// This function should be called once and at the start of all.
func (f *File) WriteImports(imports []string) {
	f.buf.WriteString("\nimport (\n")
	for _, i := range imports {
		fmt.Fprintf(&f.buf, "\t%q\n", i)
	}
	f.buf.WriteString(")\n")
}

// WriteTemplate write a template with the specified data into the
// generated file.
func (f *File) WriteTemplate(t *template.Template, data interface{}) error {
	if err := t.Execute(&f.buf, data); err != nil {
		return fmt.Errorf("Unable to write file %s: %v\n", f.filename, err)
	}
	return nil
}

func (f *File) Commit() error {
	err := os.MkdirAll(filepath.Dir(f.filename), os.ModePerm)
	if err != nil {
		return fmt.Errorf("Failed to create directoy %s: %v", filepath.Dir(f.filename), err)
	}
	formatted, err := imports.Process(f.filename, f.buf.Bytes(), &imports.Options{
		Fragment:   false,
		AllErrors:  true,
		Comments:   true,
		TabIndent:  true,
		TabWidth:   8,
		FormatOnly: true,
	})
	if err != nil {
		return err
	}
	err = os.WriteFile(f.filename, formatted, os.ModePerm)
	if err != nil {
		return fmt.Errorf("Failed to write file %s: %v", f.filename, err)
	}
	return nil
}
