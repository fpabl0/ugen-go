// Package ugen provide simple utilities to create simple and private
// generators.
package ugen

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"runtime"
	"sort"
	"text/template"
)

// File represents the generated file.
type File struct {
	*os.File
}

// FromCallerPath returns a path that is upper than the CallerPath
// by skipUp. For example:
// If the caller path is:
// 			/Users/example/project
// Then calling FromCallerPath(1) will return:
// 			/Users/example
func FromCallerPath(skipUp int) string {
	_, fpath, _, _ := runtime.Caller(1)
	for i := 0; i < skipUp+1; i++ {
		fpath = filepath.Dir(fpath)
	}
	return fpath
}

// NewFile creates a new generated file with generator header and
// package name.
func NewFile(fpath, generator, pkg string) (*File, error) {
	os.Remove(fpath)
	f, err := os.Create(fpath)
	if err != nil {
		return nil, fmt.Errorf("Unable to open file %s: %v", fpath, err)
	}

	fmt.Fprintf(f, `// auto-generated
// Code generated by '%s'. DO NOT EDIT.

package %s
`, generator, pkg)
	return &File{File: f}, nil
}

// WriteImports write imports header to the generated file.
// This function should be called once and at the start of all.
func (f *File) WriteImports(imports []string) {
	builtins := []string{}
	customs := []string{}
	for _, i := range imports {
		if filepath.Dir(i) == "." { // this means that it does not have '/', so they are builtins
			builtins = append(builtins, i)
		} else {
			customs = append(customs, i)
		}
	}
	sort.SliceStable(builtins, func(i, j int) bool {
		return builtins[i] < builtins[j]
	})
	sort.SliceStable(customs, func(i, j int) bool {
		return customs[i] < customs[j]
	})

	f.WriteString("\nimport (\n")
	for _, i := range builtins {
		fmt.Fprintf(f, "\t%q\n", i)
	}
	f.WriteString("\n")
	for _, i := range customs {
		fmt.Fprintf(f, "\t%q\n", i)
	}
	f.WriteString(")\n")
}

// WriteTemplate write a template with the specified data into the
// generated file.
func (f *File) WriteTemplate(t *template.Template, data interface{}) error {
	if err := t.Execute(f, data); err != nil {
		log.Printf("Unable to write file %s: %v\n", f.Name(), err)
		return err
	}
	return nil
}
